<?php

/**
 * @file
 * Ledger
 */

/**
 * Include code for the entity types and callbacks.
 */
module_load_include('inc', 'ledger', 'includes/ledger.account');
module_load_include('inc', 'ledger', 'includes/ledger.transaction');
module_load_include('inc', 'ledger', 'includes/callbacks');

/***************************************************************
 * Drupal core hooks
 ***************************************************************/

/**
 * Implements hook_entity_info().
 */
function ledger_entity_info() {
  $entities['ledger_account'] = array(
    'label' => t('Ledger Account'),
    'entity class' => 'LedgerAccount',
    'controller class' => 'LedgerAccountController',
    'base table' => 'ledger_account',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'aid',
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'module' => 'ledger',
  );
  $entities['ledger_transaction'] = array(
    'label' => t('Ledger Transaction'),
    'entity class' => 'LedgerTransaction',
    'controller class' => 'LedgerTransactionController',
    'base table' => 'ledger_transaction',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'tid',
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'module' => 'ledger',
  );
  return $entities;
}

/**
 * Implements hook_permission().
 *
 * @todo
 *   Add fine-tuned permissions for viewing and editing individual accounts. ie:
 *     view any accounts
 *     edit any accounts
 *     delete any accounts
 *     view own accounts
 *     edit own accounts
 *     delete own accounts
 */
function ledger_permission() {
  return array(
    'administer ledger' => array(
      'title' => t('Administer Ledger'), 
      'description' => t('Administer all ledger accounts and transactions.'),
    ),
  );
}

/**
 * Implements hook_enable().
 */
function ledger_enable() {
  
  $field_type = 'ledger_entry';
  $entity_type = 'ledger_transaction';
  $field_name = 'lender_transaction_entry';
  
  // If a field type we know should exist isn't found, clear the Field cache.
  if (!field_info_field_types($field_type)) {
    field_cache_clear();
  }

  // Look for or add a line item reference field to the order type.
  $field = field_info_field($field_name);
  $instance = field_info_instance($entity_type, $field_name, $entity_type);

  if (empty($field)) {
    $field = array(
      'field_name' => $field_name,
      'type' => $field_type,
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
      'entity_types' => array($entity_type),
      'translatable' => FALSE,
    );
    $field = field_create_field($field);
  }

  if (empty($instance)) {
    $instance = array(
      'field_name' => $field_name,
      'entity_type' => $entity_type,
      'bundle' => $entity_type,
      'label' => t('Ledger Entries'),
      'settings' => array(),
      'widget' => array(
        'type' => 'ledger_entry_default_widget',
      ),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'ledger_entry_default_formatter',
        ),
      ),
    );
    field_create_instance($instance);
  }
}

/***************************************************************
 * Field API hooks
 ***************************************************************/

/**
 * Implements hook_field_info().
 */
function ledger_field_info() {
  return array(
    'ledger_entry' => array(
      'label' => t('Ledger Entry'),
      'description' => t('Represents a single debit or credit to an account.'),
      'default_widget' => 'ledger_entry_default_widget',
      'default_formatter' => 'ledger_entry_default_formatter',
    ),
  );
}

/**
 * Implements hook_field_validate().
 *
 * @see ledger_field_widget_error()
 */
function ledger_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    
    // Make sure both an account and a value are entered
    if (empty($item['aid']) || empty($item['value'])) {
      $errors[$field['field_name']][$langcode][$delta][] = array(
        'error' => 'ledger_entry_invalid',
        'message' => t('Account and value are both required.'),
      );
    }
    
    else {
      
      // Make sure the account is a valid account
      $account = ledger_account_load($item['aid']);
      if (!$account->aid) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'ledger_entry_invalid',
          'message' => t('The account selected is not a valid account.'),
        );
      }
      
      // Make sure the value is a float value
      if (!is_numeric($item['value'])) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'ledger_entry_invalid',
          'message' => t('The transaction value must be a number.'),
        );
      }
    }
  }
}

/**
 * Implements hook_field_widget_error().
 *
 * @see ledger_field_validate()
 * @see form_error()
 */
function ledger_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'ledger_entry_invalid':
      form_error($element, $error['message']);
      break;
  }
}

/**
 * Implements hook_field_is_empty().
 */
function ledger_field_is_empty($item, $field) {
  return empty($item['aid']) && empty($item['value']);
}

/**
 * Implements hook_field_formatter_info().
 *
 * @see ledger_field_formatter_view()
 */
function ledger_field_formatter_info() {
  return array(
    'ledger_entry_default_formatter' => array(
      'label' => t('Default'),
      'field types' => array('ledger_entry'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 *
 * @see ledger_field_formatter_info()
 */
function ledger_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  if ($display['type'] == 'ledger_entry_default_formatter') {
    foreach ($items as $delta => $item) {
      
      // Load the account
      $account = ledger_account_load($item['aid']);
      
      // Format the element
      $element[$delta] = array(
        '#type' => 'html_tag',
        '#tag' => 'p',
        '#value' => t('@account: @value', array('@account' => $account->name, '@value' => $item['value'])),
      );
    }
  }
  return $element;
}

/**
 * Implements hook_field_widget_info().
 *
 * @see ledger_field_widget_form()
 */
function ledger_field_widget_info() {
  return array(
    'ledger_entry_default_widget' => array(
      'label' => t('Ledger entry'),
      'field types' => array('ledger_entry'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function ledger_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  $element['#delta'] = $delta;
  
  $element['aid'] = array(
    '#type' => 'textfield',
    '#title' => 'Account ID',
    '#default_value' => $items[$delta]['aid'],
  );
  
  $element['value'] = array(
    '#type' => 'textfield',
    '#title' => 'Transaction Value',
    '#default_value' => $items[$delta]['value'],
  );
  
  return $element;
}

/***************************************************************
 * Views API hooks
 ***************************************************************/

/**
 * Implements hook_views_api().
 */
function ledger_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'ledger') . '/includes/views',
  );
}