<?php

/**
 * @file
 * Ledger Account
 */

/***************************************************************
 * Drupal core hooks
 * *************************************************************/

/**
 * Implements hook_entity_info().
 */
function ledger_account_entity_info() {
  $entities['ledger_account'] = array(
    'label' => t('Account'),
    'label plural' => t('Accounts'),
    'description' => t('A Ledger account.'),
    'entity class' => 'LedgerAccount',
    'controller class' => 'LedgerAccountController',
    'base table' => 'ledger_account',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'aid',
      'bundle' => 'type',
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'module' => 'ledger_account',
    'bundles' => array(),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
  );
  $entities['ledger_account_type'] = array(
    'label' => t('Account type'),
    'label plural' => t('Account types'),
    'description' => t('A Ledger account type.'),
    'entity class' => 'Entity',
    'controller class' => 'LedgerAccountTypeController',
    'base table' => 'ledger_account_type',
    'fieldable' => FALSE,
    'bundle of' => 'ledger_account',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'label',
    ),
  );

  // Add bundle info but bypass entity_load() as we cannot use it here.
  $types = db_select('ledger_account_type', 'at')
    ->fields('at')
    ->execute()
    ->fetchAllAssoc('type');
  foreach ($types as $name => $type) {
    $entities['ledger_account']['bundles'][$name] = array(
      'label' => $type->label,
    );
  }

  return $entities;
}

/***************************************************************
 * Views API hooks
 * *************************************************************/

/**
 * Implements hook_views_api().
 */
function ledger_account_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'ledger_account') . '/views',
  );
}

/***************************************************************
 * Ledger Account class and functions
 * *************************************************************/

/**
 * The class for LedgerAccount entities.
 */
class LedgerAccount extends Entity {

  public function __construct($values = array()) {
    parent::__construct($values, 'ledger_account');
  }

  protected function defaultLabel() {
    return t('@name', array('@name' => $this->name));
  }

  protected function defaultUri() {
    return array('path' => 'admin/ledger/accounts/' . $this->aid);
  }
}

/**
 * The controller for LedgerAccount entities
 */
class LedgerAccountController extends EntityAPIController {

  /**
   * Create an account - we first set up the values that are specific
   * to our ledger_account schema but then also go through the EntityAPIController
   * function.
   *
   * @param $values
   *   Values passed in.
   *
   * @return
   *   An account object with all default fields initialized.
   */
  public function create(array $values = array()) {

    // Add values that are specific to our account
    $values += array(
      'aid' => '',
      'pid' => 0,
      'name' => '',
      'description' => '',
      'type' => '',
    );

    $account = parent::create($values);
    return $account;
  }

  /**
   * Delete accounts.
   *
   * @param $db_transaction
   *   Optionally a DatabaseTransaction object to use. Allows overrides to pass
   *   in their transaction object.
   */
  public function delete($ids, DatabaseTransaction $db_transaction = NULL) {

    // If these accounts were parents to other accounts, we need to remove their IDs from the parent column in the database.
    if (!empty($ids)) {
      foreach ($ids as $id) {
        db_update('ledger_account')
          ->fields(array(
            'pid' => 0,
          ))
          ->condition('pid', $id, '=')
          ->execute();
      }
    }

    parent::delete($ids, $db_transaction);
  }
}

/**
 * Access callback for ledger accounts.
 *
 * @todo
 *   Expand this access function to check based on the operation being performed.
 *   Also add ability to check a specific account entity.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $account
 *   Optionally a specific ledger account to check.
 * @param $user
 *   The user to check for. Leave it to NULL to check for the global user.
 * @return boolean
 *   Whether access is allowed or not.
 */
function ledger_account_access($op, $account = NULL, $user = NULL) {
  return user_access('administer ledger', $user);
}

/**
 * Returns a title for the account.
 * This is a recursive function that also returns the names of parent accounts.
 * It includes logic to avoid infinite recursion.
 *
 * @param $account
 *   A ledger account object.
 *
 * @return
 *   A string that represents the account title.
 */
function ledger_account_title($account) {

  // A static array for storing the ids of parent accounts that are loaded recursively. This is used to ensure we don't enter a recursive loop.
  static $parents = array();

  // Add the current account id to the list of parents. This prevents the account name from appearing twice in recursive accounts, which is not necessary, but hey why not?
  $parents[] = $account->aid;

  // If the account has a parent, load it.
  if ($account->pid) {

    // Check to see if the parent has been loaded previously. If so, don't continue.
    if (!in_array($account->pid, $parents)) {
      // Add the parent account id to the static array of ids.
      $parents[] = $account->pid;

      // Load the parent account and retrieve it's title (recursively).
      $parent_account = ledger_account_load($account->pid);
      $parent_title = ledger_account_title($parent_account);

      // Return the account title along with its parents', separated by colons.
      return $parent_title . ':' . $account->name;
    }
  }

  // Reset the static array of parent ids.
  $parents = array();

  // Return the account name.
  return $account->name;
}

/**
 * Returns an initialized account object.
 *
 * @return
 *   An account object with all default fields initialized.
 */
function ledger_account_new($values = array()) {
  return entity_get_controller('ledger_account')->create($values);
}

/**
 * Loads an account by ID.
 */
function ledger_account_load($aid) {
  $accounts = ledger_account_load_multiple(array($aid), array());
  return $accounts ? reset($accounts) : FALSE;
}

/**
 * Loads multiple accounts by ID or based on a set of matching conditions.
 *
 * @see entity_load()
 *
 * @param $account_ids
 *   An array of account IDs.
 * @param $conditions
 *   An array of conditions on the {ledger_account} table in the form
 *     'field' => $value.
 * @param $reset
 *   Whether to reset the internal account loading cache.
 *
 * @return
 *   An array of account objects indexed by aid.
 */
function ledger_account_load_multiple($account_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('ledger_account', $account_ids, $conditions, $reset);
}

/**
 * Saves an account to the database.
 *
 * @param $account
 *   The account object.
 */
function ledger_account_save($account) {
  return entity_get_controller('ledger_account')->save($account);
}

/**
 * Deletes an account by ID.
 *
 * @param $aid
 *   The ID of the account to delete.
 *
 * @return
 *   TRUE on success, FALSE otherwise.
 */
function ledger_account_delete($aid) {
  return ledger_account_delete_multiple(array($aid));
}

/**
 * Deletes multiple accounts by ID.
 *
 * @param $aids
 *   An array of account IDs to delete.
 *
 * @return
 *   TRUE on success, FALSE otherwise.
 */
function ledger_account_delete_multiple($aids) {
  return entity_get_controller('ledger_account')->delete($aids);
}

/***************************************************************
 * Account type class and functions.
 * *************************************************************/

/**
 * The controller for LedgerAccount entities
 */
class LedgerAccountTypeController extends EntityAPIControllerExportable {
  public function __construct($entityType) {
    parent::__construct($entityType);
  }

  /**
   * Create an account type - we first set up the values that are specific
   * to our ledger_account_type schema but then also go through the EntityAPIController
   * function.
   *
   * @param $values
   *   Values passed in.
   *
   * @return
   *   An account type object with all default fields initialized.
   */
  public function create(array $values = array()) {

    // Add values that are specific to our account
    $values += array(
      'id' => '',
      'type' => '',
      'label' => '',
    );

    $account_type = parent::create($values);
    return $account_type;
  }
}

/**
 * Returns an initialized account type object.
 *
 * @return
 *   An account type object with all default fields initialized.
 */
function ledger_account_type_new($values = array()) {
  return entity_get_controller('ledger_account_type')->create($values);
}

/**
 * Menu argument loader; Load a ledger account type by string.
 *
 * @param $type
 *   The machine-readable name of a account type to load.
 * @return
 *   A account type array or FALSE if $name does not exist.
 */
function ledger_account_type_load($type) {
  return ledger_account_get_types($type);
}

/**
 * Saves an account type to the database.
 *
 * @param $account_type
 *   The account type object.
 */
function ledger_account_type_save($account_type) {
  return entity_get_controller('ledger_account_type')->save($account_type);
}

/**
 * Gets a single account type label, based on it's machine name.
 */
function ledger_account_type_label($type) {
  $account_type = ledger_account_get_types($type);
  return $account_type->label;
}

/**
 * Gets an array of all account type names, keyed by type name.
 */
function ledger_account_type_get_names() {
  $account_types = array();
  foreach (ledger_account_get_types() as $type => $account_type) {
    $account_types[$type] = $account_type->label;
  }
  return $account_types;
}

/**
 * Gets an array of all account types, keyed by the type name.
 *
 * @param $type
 *   If set, the type with the given name is returned.
 * @return
 *   Depending whether $type is set, an array of account types or a single one.
 */
function ledger_account_get_types($type = NULL) {
  $account_types = entity_load_multiple_by_name('ledger_account_type', isset($type) ? array($type) : FALSE);
  return isset($type) ? reset($account_types) : $account_types;
}


/***************************************************************
 * Account form helper functions.
 * *************************************************************/

/**
 * Returns a list of accounts to use in a form select element.
 */
function ledger_account_select_options() {
  static $options = array();
  if (empty($options)) {

    // Give it a 0 value to start
    $options[0] = 'none';

    // Load up all the accounts from the database.
    $query = db_select('ledger_account', 'a');
    $query->fields('a', array('aid', 'name'));
    $accounts = $query->execute();
    foreach ($accounts as $account) {
      $options[$account->aid] = $account->name;
    }
  }
  return $options;
}