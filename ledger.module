<?php

/**
 * @file
 * Ledger
 */

/****************************************************************
 * Drupal hooks
 * **************************************************************/

/**
 * Implements hook_permission().
 */
function ledger_permission() {
  return array(
    'administer ledger' => array(
      'title' => t('Administer Ledger'),
      'description' => t('Administer the ledger module settings.'),
      'restrict access' => TRUE,
    ),
  );
}

/***************************************************************
 * Access functions
 * *************************************************************/

/**
 * Access callback for ledger entities.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'.
 * @param $entity
 *   Optionally a specific ledger entity to check.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @param $entity_type
 *   The type of entity to check.
 *
 * @return boolean
 *   Whether access is allowed or not.
 */
function ledger_entity_access($op, $entity = NULL, $account = NULL, $entity_type = NULL) {

  // If an account isn't provided, use the currently logged in user.
  if (empty($account)) {
    global $user;
    $account = $user;
  }

  // If the user has 'administer ledger' permission, grant them access.
  if (user_access('administer ledger', $account)) {
    return TRUE;
  }

  // If a new entity is being created, check access.
  if ($op == 'create') {
    return user_access('create ' . $entity_type, $account);
  }

  // If an entity was provided, check access based on the op.
  elseif (isset($entity)) {
    switch ($op) {

      // View
      case 'view':

        // If the account has access to view all entities of this type, proceed.
        if (user_access('view all ' . $entity_type, $account)) {
          return TRUE;
        }

        // Check to see if the account owns the entity and can view it.
        if (!empty($entity->uid) && $entity->uid == $account->uid) {
          return user_access('view own ' . $entity_type, $account);
        }

      // Update/delete
      case 'update':
      case 'delete':

        // If the account has access to edit all entities of this type, proceed.
        if (user_access('edit all ' . $entity_type, $account)) {
          return TRUE;
        }

        // Check to see if the account owns the entity and can edit it.
        if (!empty($entity->uid) && $entity->uid == $account->uid) {
          return user_access('edit own ' . $entity_type, $account);
        }
    }
  }

  // If all else fails, deny access.
  return FALSE;
}


/**
 * Generates granular entity permissions for use in hook_permission().
 *
 * @param $entity_type
 *   The entity type to define permissions for.
 *
 * @return array
 *   Returns an array of permissions for hook_permission().
 */
function ledger_entity_access_permissions($entity_type) {
  $entity_info = entity_get_info($entity_type);

  // Grab the entity label.
  $label = strtolower($entity_info['label plural']);

  // Generic create, view, and edit permissions.
  $permissions['create ' . $entity_type] = array(
    'title' => t('Create ledger @entity_type', array('@entity_type' => $label)),
  );
  $permissions['view own ' . $entity_type] = array(
    'title' => t('View own ledger @entity_type', array('@entity_type' => $label)),
  );
  $permissions['edit own ' . $entity_type] = array(
    'title' => t('Edit own ledger @entity_type', array('@entity_type' => $label)),
  );
  $permissions['view all ' . $entity_type] = array(
    'title' => t('View all ledger @entity_type', array('@entity_type' => $label)),
    'restrict access' => TRUE,
  );
  $permissions['edit all ' . $entity_type] = array(
    'title' => t('Edit all ledger @entity_type', array('@entity_type' => $label)),
    'restrict access' => TRUE,
  );

  return $permissions;
}

/***************************************************************
 * Configuration functions
 * *************************************************************/

/**
 * Create ledger_value field.
 *
 * This function is not used by the ledger module itself, but is provided
 * for other ledger modules to use to add a value field to their entities.
 * See ledger_account_entry_configure_account_entry_types() for an example.
 *
 * @return
 *   Returns the field name.
 */
function ledger_configure_value_field() {

  // If the fraction field type isn't found, clear the Field cache.
  if (!field_info_field_types('fraction')) {
    field_cache_clear();
  }

  // Look up existing field information.
  $field_name = 'ledger_value';
  $field = field_info_field($field_name);

  // If the field doesn't exist, create it.
  if (empty($field)) {
    $field = array(
      'field_name' => $field_name,
      'type' => 'fraction',
      'cardinality' => 1,
      'translatable' => FALSE,
      'locked' => TRUE,
    );
    $field = field_create_field($field);
  }

  // Return the field name.
  return $field_name;
}

