<?php

/**
 * @file
 * Ledger Period
 */

/***************************************************************
 * Drupal core hooks
 * *************************************************************/

/**
 * Implements hook_menu().
 */
function ledger_period_menu() {

  // Period settings form.
  $items['admin/ledger/settings/period'] = array(
    'title' => 'Accounting period',
    'description' => 'Configure accounting period and balance calculation settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ledger_period_settings_form'),
    'access arguments' => array('administer ledger'),
  );

  return $items;
}

/**
 * Implements hook_[entity]_insert().
 */
function ledger_period_ledger_account_entry_insert($account_entry) {

  // Check to see if account entry balance calculation is enabled.
  if (variable_get('ledger_period_balance_calculate', 1)) {

    // Load the transaction to get the timestamp.
    $transaction = ledger_transaction_load($account_entry->tid);

    // Recalculate the account entry balances when a new account entry is inserted..
    ledger_period_calculate_balances($account_entry->aid, $transaction->timestamp);
  }
}

/**
 * Implements hook_[entity]_update().
 */
function ledger_period_ledger_account_entry_update($account_entry) {

  // Check to see if account entry balance calculation is enabled.
  if (variable_get('ledger_period_balance_calculate', 1)) {

    // Load the transaction to get the timestamp.
    $transaction = ledger_transaction_load($account_entry->tid);

    // Start a list of accounts to recalculate account entry balances in.
    $aids = array();

    // If the value of the account entry is changed, recalculate the account entry balances in that account.
    if ($account_entry->value != $account_entry->original->value) {
      $aids[] = $account_entry->aid;
    }

    // If the account entry is moved to another account, recalculate the account entry balances in both accounts.
    if ($account_entry->aid != $account_entry->original->aid) {
      $aids[] = $account_entry->aid;
      $aids[] = $account_entry->original->aid;
    }

    // Recalculate account entry balances for the specified accounts.
    foreach ($aids as $aid) {
      ledger_period_calculate_balances($aid, $transaction->timestamp);
    }
  }
}

/**
 * Implements hook_[entity]_delete().
 */
function ledger_period_ledger_account_entry_delete($account_entry) {

  // Delete the account entry balance record.
  ledger_period_delete_balance($account_entry->eid);

  // Check to see if account entry balance calculation is enabled.
  if (variable_get('ledger_period_balance_calculate', 1)) {

    // Load the transaction to get the timestamp.
    $transaction = ledger_transaction_load($account_entry->tid);

    // Recalculate the account entry balances when an account entry is deleted.
    ledger_period_calculate_balances($account_entry->aid, $transaction->timestamp);
  }
}

/***************************************************************
 * Views API hooks
 * *************************************************************/

/**
 * Implements hook_views_api().
 */
function ledger_period_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'ledger_period') . '/views',
  );
}

/***************************************************************
 * Period settings form
 * *************************************************************/

/**
 * Form callback: ledger period settings form.
 */
function ledger_period_settings_form($form, &$form_state) {

  // Sign reverse balance settings.
  $form['ledger_period_sign_reverse'] = array(
    '#type' => 'radios',
    '#title' => t('Sign-reverse account balances'),
    '#description' => t('Ledger stores credits to Liability, Equity, and Income accounts as negative numbers, to aid in balancing equations. You can control whether these accounts should be displayed with positive or negative balances with this setting.'),
    '#options' => array(
      '0' => 'None - display the balance exactly as it is stored.',
      '1' => 'Reverse the sign on Liability, Equity, and Income account balances.',
      '2' => 'Reverse the sign on Income and Expense account balances.',
    ),
    '#default_value' => variable_get('ledger_period_sign_reverse', 1),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/***************************************************************
 * Utility functions.
 * *************************************************************/

/**
 * Update account entry balances.
 *
 * @param $aid
 *   The id of the account to update balances for. If none is provided, all accounts will be updated.
 * @param $timestamp
 *   The timestamp to start with. All account entries with a timestamp greater than or equal to will be updated.
 *   If none is provided, all account entries will be updated.
 */
function ledger_period_calculate_balances($aid = NULL, $timestamp = 0) {

  // If a specific account id is provided, recalculate the balances for account entries in it.
  if ($aid) {

    // Initialize the balance.
    $balance = 0;

    // Start with the last balance before the specified timestamp (if necessary).
    if ($timestamp) {
      $query = db_select('ledger_account_entry_balance', 'b');
      $query->addExpression('b.balance_num / b.balance_denom', 'balance');
      $query->join('ledger_account_entry', 'e', 'b.eid = e.eid');
      $query->join('ledger_transaction', 't', 'e.tid = t.tid');
      $query->condition('e.aid', $aid);
      $query->condition('t.timestamp', $timestamp, '<');
      $query->orderby('t.timestamp', 'DESC');
      $query->range(0, 1);  // Only return the first result
      $result = $query->execute();
      $balance = $result->fetchField(0);
    }

    // Load all account entries for the account.
    $query = db_select('ledger_account_entry', 'e');
    $query->addField('e', 'eid');
    $query->addExpression('e.value_num / e.value_denom', 'value');
    $query->join('ledger_transaction', 't', 'e.tid = t.tid');
    $query->condition('e.aid', $aid);
    $query->condition('t.timestamp', $timestamp, '>=');
    $query->orderby('t.timestamp', 'ASC');
    $query->orderby('e.eid', 'ASC');
    $result = $query->execute();

    // Loop through the results.
    foreach ($result as $entry) {

      // Add the value to the balance.
      $balance += $entry->value;

      // Convert the balance to a numerator and denominator.
      $fraction = ledger_value_fraction($balance);

      // Delete the existing account entry balance first.
      ledger_period_delete_balance($entry->eid);

      // Insert a new account entry balance in the database.
      $record = array(
        'eid' => $entry->eid,
        'balance_num' => $fraction['num'],
        'balance_denom' => $fraction['denom'],
      );
      drupal_write_record('ledger_account_entry_balance', $record);
    }
  }

  // If no account id is provided, load a list of all account ids and recalculate all of them by calling this function again.
  else {

    // Load all the account ids.
    $query = db_select('ledger_account', 'a');
    $query->addField('a', 'aid');
    $result = $query->execute();

    // Loop through all the account ids and recalculate the balances for each.
    foreach ($result as $account) {
      ledger_period_calculate_balances($account->aid);
    }
  }
}

/**
 * Reverses the sign of a value according to the ledger_period_sign_reverse variable.
 *
 * @param &$value
 *   The value to reverse, passed by reference.
 * @param $account_type
 *   The account type.
 *
 * @return
 *   Returns the original $value, after reversing the sign if necessary.
 */
function ledger_period_sign_reverse(&$value, $account_type) {

  // Load the sign reversing variable.
  $reverse = variable_get('ledger_period_sign_reverse', 1);

  // Switch through the variable options.
  if ($reverse) {
    switch ($reverse) {

      // If the variable is set to 1, switch the sign on liability, equity, and income accounts.
      case '1':
        if ($account_type == 'liability' || $account_type == 'equity' || $account_type == 'income') {
          $value = $value * -1;
        }
        break;

      // If the variable is set to 2, switch the sign on income and expense accounts.
      case '2':
        if ($account_type == 'income' || $account_type == 'expense') {
          $value = $value * -1;
        }
        break;
    }
  }
}

/**
 * Delete the balance for an account entry.
 *
 * @param $eid
 *   The account entry id to delete the balance for.
 */
function ledger_period_delete_balance($eid) {
  db_delete('ledger_account_entry_balance')->condition('eid', $eid)->execute();
}

