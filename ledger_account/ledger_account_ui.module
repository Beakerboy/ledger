<?php

/**
 * @file
 * Ledger Account UI
 */

/***************************************************************
 * Drupal core hooks
 ***************************************************************/

/**
 * Implements hook_entity_info_alter().
 */
function ledger_account_ui_entity_info_alter(&$entity_info) {
  
  // Enable the entity API's admin UI for the ledger account type
  if (!empty($entity_info['ledger_account_type'])) {
    $entity_info['ledger_account_type'] += array(
      'access callback' => 'ledger_account_access',
      'module' => 'ledger_account',
      'admin ui' => array(
        'path' => 'admin/ledger/settings/account-types',
        'controller class' => 'EntityDefaultUIController',
        'menu wildcard' => '%ledger_account_type',
      ),
    );
  }
  
  // Enable the entity API's admin UI for each account type
  foreach (ledger_account_get_types() as $type => $info) {
    $entity_info['ledger_account']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/ledger/settings/account-types/%ledger_account_type',
        'real path' => 'admin/ledger/settings/account-types/' . $type,
        'bundle argument' => 4,
        'access arguments' => array('administer ledger'),
      ),
    );
  }
}

/**
 * Implements hook_menu().
 */
function ledger_account_ui_menu() {
  $items = array();
  
  // Note: the following pages are defined by default Views:
  //   /admin/ledger/accounts

  // Create account
  $items['admin/ledger/accounts/add'] = array(
    'title' => 'Create a ledger account',
    'description' => 'Create a new ledger account.',
    'page callback' => 'ledger_account_ui_account_form_wrapper',
    'page arguments' => array(entity_get_controller('ledger_account')->create(), 3),
    'access callback' => 'ledger_account_access',
    'access arguments' => array('create'),
    'weight' => 10,
  );
  
  // Edit account
  $items['admin/ledger/accounts/%ledger_account/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'ledger_account_ui_account_form_wrapper',
    'page arguments' => array(3, 4),
    'access callback' => 'ledger_account_access',
    'access arguments' => array('update', 3),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  
  // Delete account
  $items['admin/ledger/accounts/%ledger_account/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'ledger_account_ui_account_form_wrapper',
    'page arguments' => array(3, 4),
    'access callback' => 'ledger_account_access',
    'access arguments' => array('delete', 3),
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
    'context' => MENU_CONTEXT_INLINE,
  );

  return $items;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function ledger_account_ui_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  
  // Add action link 'ledger/accounts/add' on 'ledger/accounts'.
  if ($root_path == 'admin/ledger/accounts') {
    $item = menu_get_item('admin/ledger/accounts/add');  // Load the menu item for the account add form
    $item['localized_options']['query']['destination'] = current_path();  // Set the destination argument to the current path
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/***************************************************************
 * Views hooks
 ***************************************************************/

/**
 * Implements hook_views_api().
 */
function ledger_account_ui_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'ledger_account_ui') . '/views',
  );
}

/***************************************************************
 * Page callbacks
 ***************************************************************/

/**
 * Wrapper function for the ledger_ui_account_form that serves as a page callback.
 */
function ledger_account_ui_account_form_wrapper($account, $op) {
  
  // Set the page title
  drupal_set_title(ledger_account_title($account));
  
  // Create the breadcrumb for the page
  $breadcrumb = array(
    l(t('Home'), '<front>'),
    l(t('Administration'), 'admin'),
    l(t('Ledger'), 'admin/ledger'),
    l(t('Accounts'), 'admin/ledger/accounts'),
  );
  drupal_set_breadcrumb($breadcrumb);
  
  // Display the ledger account form.
  if ($op == 'delete') {
    return drupal_get_form('ledger_account_delete_form', $account);
  } else {
    return drupal_get_form('ledger_account_form', $account, $op);
  }
}

/***************************************************************
 * Account entity forms
 ***************************************************************/

/**
 * Form callback: ledger account edit form.
 */
function ledger_account_form($form, &$form_state, $account, $op = 'edit') {
  
  // Save the account object to the $form_state.
  $form_state['ledger_account'] = $account;
  
  // Account id
  $form['aid'] = array(
    '#type' => 'hidden',
    '#default_value' => $account->aid,
  );
  
  // Account name
  $form['name'] = array(
    '#title' => t('Account name'),
    '#type' => 'textfield',
    '#default_value' => $account->name,
    '#description' => t('The name of the account.'),
    '#required' => TRUE,
  );
  
  // Account description
  $form['description'] = array(
    '#title' => t('Description'),
    '#type' => 'textfield',
    '#default_value' => $account->description,
    '#description' => t('A brief description of the account.'),
  );
  
  // Account type
  $options = ledger_account_type_get_names();
  $form['type'] = array(
    '#title' => t('Account type'),
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => $account->type,
    '#description' => t('The account type.'),
    '#required' => TRUE,
  );
  
  // Parent account ID
  $form['pid'] = array(
    '#title' => t('Parent account'),
    '#type' => 'select',
    '#options' => ledger_account_select_options(),
    '#default_value' => $account->pid,
    '#description' => t('The account\'s parent account.'),
  );
  
  // Form actions
  $form['actions'] = array('#type' => 'actions');
  
  // Submit button
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save account'),
    '#weight' => 40,
  );
  
  return $form;
}

/**
 * Validate callback for ledger_account_form().
 */
function ledger_account_form_validate(&$form, &$form_state) {
  
  // Make sure the parent account ID is a valid account.
  $pid = $form_state['values']['pid'];
  if (!empty($pid)) {
    
    // An account cannot be it's own parent.
    if ($pid == $form_state['values']['aid']) {
      form_set_error('pid', 'An account cannot be its own parent.');
    }
    
    else {
      
      // Load the parent account
      $parent_account = ledger_account_load($pid);

      // Check to see if the parent account exists.
      if (!isset($parent_account->aid)) {
        form_set_error('pid', 'Invalid account.');
      }
    }
  }
}

/**
 * Submit callback for ledger_account_form().
 */
function ledger_account_form_submit(&$form, &$form_state) {
  
  // If the user is editing an account, load a fresh copy to merge changes to.
  if ($form_state['ledger_account']->aid) {
    $account = ledger_account_load($form_state['ledger_account']->aid);
    $account->name = $form_state['values']['name'];
    $account->description = $form_state['values']['description'];
    $account->type = $form_state['values']['type'];
    $account->pid = $form_state['values']['pid'];
  }
  
  // If a new account is being created, build a new account object.
  else {
    $account = ledger_account_new($form_state['values']);
  }
  
  // Save.
  $account->save();
  
  // Provide a default redirect.
  $form_state['redirect'] = 'admin/ledger/accounts';
}

/**
 * Form callback: confirmation form for deleting an account.
 *
 * @param $account
 *   The account object to delete through the form.
 *
 * @return
 *   The form array to confirm deletion..
 *
 * @see confirm_form()
 */
function ledger_account_delete_form($form, &$form_state, $account) {
  
  // Save the account object to the $form_state.
  $form_state['ledger_account'] = $account;
  
  // Confirm form
  $form = confirm_form($form,
    t('Are you sure you want to delete the account "@name"?', array('@name' => $account->name)),
    '',
    '<p>' . t('Deleting this account cannot be undone.') . '</p>',
    t('Delete'),
    t('Cancel'),
    'confirm'
  );
  return $form;
}

/**
 * Submit callback for ledger_account_delete_form().
 */
function ledger_account_delete_form_submit($form, &$form_state) {
  
  // Get the account object from the $form_state.
  $account = $form_state['ledger_account'];
  
  // Delete the account and log the results.
  /**
   * @todo:
   *   Make this check to see if the deletion succeeded, like Drupal Commerce does.
   *   Commerce currently uses it's own custom fork of EntityAPIController which extends the delete() function to return TRUE/FALSE.
   *   See commerce_order_order_delete_form_submit().
   */
  ledger_account_delete($account->aid);
  drupal_set_message(t('Account "@name" has been deleted.', array('@name' => $account->name)));
  watchdog('ledger_account', 'Deleted account "@name."', array('@name' => $account->name), WATCHDOG_NOTICE);
  
  // Redirect
  $form_state['redirect'] = 'admin/ledger/accounts';
}

/***************************************************************
 * Account entity type forms
 ***************************************************************/

/**
 * Form callback: ledger account type edit form
 */
function ledger_account_type_form($form, &$form_state, $account_type, $op = 'edit') {
  
  if ($op == 'clone') {
    $account_type->label .= ' (cloned)';
    $account_type->name = '';
  }
  
  // Label
  $form['label'] = array(
    '#title' => t('Label'),
    '#type' => 'textfield',
    '#default_value' => isset($account_type->label) ? $account_type->label : '',
    '#description' => t('The human-readable name of this account type.'),
    '#required' => TRUE,
  );
  
  // Machine-readable type name.
  $form['name'] = array(
    '#type' => 'machine_name',
    '#default_value' => isset($account_type->name) ? $account_type->name : '',
    '#maxlength' => 32,
    '#machine_name' => array(
      'exists' => 'ledger_account_get_types',
      'source' => array('name'),
    ),
    '#description' => t('A unique machine-readable name for this account type. It must only contain lowercase letters, numbers, and underscores.'),
  );
  
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save account type'),
    '#weight' => 40,
  );
  
  return $form;
}

/**
 * Form API submit callback for the type form.
 */
function ledger_account_type_form_submit(&$form, &$form_state) {
  $account_type = entity_ui_form_submit_build_entity($form, $form_state);
  $account_type->save();
  $form_state['redirect'] = 'admin/ledger/settings/account-types';
}