<?php

/**
 * @file
 * Ledger Account
 */

/***************************************************************
 * Drupal core hooks
 ***************************************************************/

/**
 * Implements hook_entity_info().
 */
function ledger_account_entity_info() {
  $entities['ledger_account'] = array(
    'label' => t('Ledger Account'),
    'entity class' => 'LedgerAccount',
    'controller class' => 'LedgerAccountController',
    'base table' => 'ledger_account',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'aid',
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'module' => 'ledger_account',
  );
  return $entities;
}

/***************************************************************
 * Views API hooks
 ***************************************************************/

/**
 * Implements hook_views_api().
 */
function ledger_account_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'ledger_account') . '/views',
  );
}

/***************************************************************
 * Ledger Account class and functions
 ***************************************************************/

/**
 * The class for LedgerAccount entities.
 */
class LedgerAccount extends Entity {
  
  public function __construct($values = array()) {
    parent::__construct($values, 'ledger_account');
  }
  
  protected function defaultLabel() {
    return t('@name', array('@name' => $this->name));
  }
  
  protected function defaultUri() {
    return array('path' => 'admin/ledger/accounts/' . $this->aid);
  }
}

/**
 * The controller for LedgerAccount entities
 */
class LedgerAccountController extends EntityAPIController {
  public function __construct($entityType) {
    parent::__construct($entityType);
  }

  /**
   * Create an account - we first set up the values that are specific
   * to our ledger_account schema but then also go through the EntityAPIController
   * function.
   * 
   * @param $values
   *   Values passed in.
   *
   * @return
   *   A model object with all default fields initialized.
   */
  public function create(array $values = array()) {
    
    // Add values that are specific to our account
    $values += array( 
      'aid' => '',
      'pid' => 0,
      'name' => '',
      'description' => '',
      'type' => '',
    );
    
    $account = parent::create($values);
    return $account;
  }
}

/**
 * Access callback for ledger accounts.
 *
 * @todo
 *   Expand this access function to check based on the operation being performed.
 *   Also add ability to check a specific account entity.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $account
 *   Optionally a specific ledger account to check.
 * @param $user
 *   The user to check for. Leave it to NULL to check for the global user.
 * @return boolean
 *   Whether access is allowed or not.
 */
function ledger_account_access($op, $account = NULL, $user = NULL) {
  return user_access('administer ledger', $user);
}

/**
 * Loads an account by ID.
 */
function ledger_account_load($aid) {
  $accounts = ledger_account_load_multiple(array($aid), array());
  return $accounts ? reset($accounts) : FALSE;
}

/**
 * Loads multiple accounts by ID or based on a set of matching conditions.
 *
 * @see entity_load()
 *
 * @param $account_ids
 *   An array of account IDs.
 * @param $conditions
 *   An array of conditions on the {ledger_account} table in the form
 *     'field' => $value.
 * @param $reset
 *   Whether to reset the internal account loading cache.
 *
 * @return
 *   An array of account objects indexed by aid.
 */
function ledger_account_load_multiple($account_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('ledger_account', $account_ids, $conditions, $reset);
}

/**
 * Returns an initialized account object.
 *
 * @return
 *   An account object with all default fields initialized.
 */
function ledger_account_new($values = array()) {
  return entity_get_controller('ledger_account')->create($values);
}

/**
 * Returns a title for the account.
 *
 * @param $account
 *   A ledger account object.
 *
 * @return
 *   A string that represents the account title.
 */
function ledger_account_title($account) {
  return $account->name;
}

/**
 * Deletes an account by ID.
 *
 * @param $aid
 *   The ID of the account to delete.
 *
 * @return
 *   TRUE on success, FALSE otherwise.
 */
function ledger_account_delete($aid) {
  return ledger_account_delete_multiple(array($aid));
}

/**
 * Deletes multiple accounts by ID.
 *
 * @param $aids
 *   An array of account IDs to delete.
 *
 * @return
 *   TRUE on success, FALSE otherwise.
 */
function ledger_account_delete_multiple($aids) {
  return entity_get_controller('ledger_account')->delete($aids);
}

/***************************************************************
 * Account entity properties get/set callbacks
 ***************************************************************/

/**
 * Callback for setting Ledger Account entity properties.
 */
function ledger_account_set_properties($account, $name, $value) {
  if ($name == 'parent') {
    $account->pid = $value;
  }
}

/**
 * Callback for getting Ledger Account entity properties.
 */
function ledger_account_get_properties($account, array $options, $name, $entity_type) {
  if ($name == 'parent') {
    return $account->pid;
  }
}